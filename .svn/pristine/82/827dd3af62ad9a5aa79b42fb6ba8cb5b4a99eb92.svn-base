using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Remoting.Messaging;
using System.Security.Cryptography;
using System.Text;
using Dragon_Age_Inquisition_Save_Editor.SaveData;
using HavenInterface.IOPackage;

namespace Dragon_Age_Inquisition_Save_Editor.DAIO
{
    public class DAIIO : Stream
    {
        internal readonly Stream xbaseStream;

        private long xbitstart;
        private long xbasepos;
        private long xbitlength;
        private bool xpaststream;

        public bool IsBigEndian { get; set; }

        public uint CurrentBit;


        public long OrigBitPos
        {
            get { return xbitstart; }
            set { xbitstart = value; }
        }

        public long OrigPosition
        {
            get { return (((OrigBitPos >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC); }
        }

        private uint xshiftseed;

        public DAIIO(byte[] data, long start = 0, long length = 0)
        {
            xbaseStream = new MemoryStream(data);
            int r9 = (int)((start) & 0xFFFFFFFF & 0xFFFFFFE0);
            int r28 = (int)(start - r9);
            int r5 = (int)((((r28 + length) >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC);
            xbitstart = start;
            if (length > 0)
                xbitlength = r5;
            else xbitlength = (((data.Length) << 3) & 0x7FFFFFF);
            Position = r28;
        }

        public DAIIO(Stream io,long start, long length = 0)
        {
            xbaseStream = io;
            int r9 = (int) ((start) & 0xFFFFFFFF & 0xFFFFFFE0);
            xbasepos = r9;
            int r28 = (int) (start - r9);
            int r5 = (int) (r28 + length);
            xbitstart = r28;
            if (length > 0)
                xbitlength = r5;
            else xbitlength = (((io.Length) << 3) & 0x7FFFFFF);
            Position = r28;
            xpaststream = true;
        }

        public DAIIO()
        {
            xbaseStream = new MemoryStream();
        }

        public override int ReadByte()
        {
            return ReadBit(8);
        }

        public short ReadInt16()
        {
            return (short) ReadBit2(0x10);
        }

        public ushort ReadUInt16()
        {
            return (ushort)ReadBit2(0x10);
        }

        public int ReadInt24()
        {
            return ReadBit2(0x18);
        }

        public int ReadInt32()
        {
            return ReadBit2(0x20);
        }

        public uint ReadUInt32()
        {
            return (uint) ReadBit2(0x20);
        }

        public long ReadInt64()
        {
            var x = ReadBytes(8);
            if (IsBigEndian)
                Array.Reverse(x);
            return BitConverter.ToInt64(x,0);
        }

        public ulong ReadUInt64()
        {
            var x = ReadBytes(8);
            if (IsBigEndian)
                Array.Reverse(x);
            return BitConverter.ToUInt64(x, 0);
        }

        public bool ReadBoolean()
        {
           return Convert.ToBoolean(ReadBit2(0x1));
        }

        public float ReadSingle()
        {
            var buf = new byte[4];
            Read(buf, 0, 4);
            if (IsBigEndian)
                Array.Reverse(buf);
            return BitConverter.ToSingle(buf, 0);
        }

        public string ReadString(int count)
        {
            string x = "";
            for (int i = 0; i < count; i++)
                x += (char) ReadBit(0x8);
            return x;
        }

        public int ReadBit(uint bits)
        {
            uint xval = 0;
            uint r3 = 0;
            if ((CurrentBit + bits) > Length)
                return -1;
            uint xcleanbit = (CurrentBit & 0xFFFFFFFF & 0x1F);
            uint xcurflag = (0x20 - xcleanbit);
            if (xcurflag <= bits)
            {
                Position = Position;
                xval = xshiftseed;
                uint xlastbyteflag = bits - xcurflag;
                xcurflag = ((xval >> (int)xcleanbit) << (int)xlastbyteflag);
                if ((xbaseStream.Position + 4) <= xbaseStream.Length)
                    xval = xbaseStream.ReadUInt32(IsBigEndian);
                var r8 = (uint)(1 << (int)xlastbyteflag);
                uint r6 = 0x20 - xlastbyteflag;
                r6 = xval >> (int)r6;
                r8--;
                xval <<= (int)xlastbyteflag;
                xlastbyteflag = r6 & r8;
                r3 = xlastbyteflag | xcurflag;
                xshiftseed = xval;
            }
            else
            {
                xval = ((xshiftseed << (int)bits) & 0xFFFFFF00);
                var tmp = BitConverter.GetBytes(xshiftseed);
                Array.Reverse(tmp);
                r3 = tmp[0];
                xshiftseed = xval;
            }
            CurrentBit += bits;
            return (byte)(r3 & 0xFFFFFFFF & 0xFF);
        }

        public int ReadBit2(uint bits)
        {
            uint xval = 0;
            int r3 = 0;
            if ((CurrentBit + bits) > Length)
                return -1;
            uint xcleanbit = (CurrentBit & 0xFFFFFFFF & 0x1F);
            uint xcurflag = (0x20 - xcleanbit);
            if (bits >= xcurflag)
            {
                Position = Position;
                xval = xshiftseed;
                uint xlastbyteflag = bits - xcurflag;
                xcurflag = ((xval >> (int)xcleanbit) << (int)xlastbyteflag);
                if ((xbaseStream.Position + 4) <= xbaseStream.Length)
                    xval = xbaseStream.ReadUInt32(IsBigEndian);
                var r8 = (uint)(1 << (int)xlastbyteflag);
                uint r6 = 0x20 - xlastbyteflag;
                r6 = xval >> (int)r6;
                r8--;
                xval <<= (int)xlastbyteflag;
                xlastbyteflag = r6 & r8;
                r3 = (int) (xlastbyteflag | xcurflag);
                xshiftseed = xval;
            }
            else
            {
                xval = ((xshiftseed << (int)bits));
                r3 = (int)((xshiftseed >> (int)(0x20 - bits)));
                xshiftseed = xval;
            }
            var r11 = (int) (Math.Abs(bits) * (-1));
            r11 = r11 >> 0x1f;
            CurrentBit += bits;
            return (r11 & r3);
        }

        public byte[] ReadBytes(int bitlength, bool shiftdata)
        {
            int r9 = (int) ((Position) & 0xFFFFFFFF & 0xFFFFFFE0);
            int xstartpos = (int) ((((Position + xbasepos) >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC);
            int r28 = (int)(Position - r9);
            int r5 = (int)((((r28 + bitlength) >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC);
            xbaseStream.Position = xstartpos;
            //Position = r9;
            byte[] buff = new byte[r5];
            var ps = Position;
            if (shiftdata)
                Read(buff, 0, r5);
            else
                xbaseStream.Read(buff, 0, r5);
            Position = ps + bitlength;
            return buff;
        }

        public byte[] ReadBytes(int length)
        {
            byte[] buff = new byte[length];
            Read(buff, 0, length);
            return buff;
        }

        public byte[] ReadData(int totalbits)
        {
            var x = new List<byte>();
            int left = totalbits;
            while (left >= 0x20)
            {
                int t = ReadBit2(0x20);
                left -= 0x20;
                var tmp = BitConverter.GetBytes(t);
                if (IsBigEndian)
                    Array.Reverse(tmp);
                x.AddRange(tmp);
            }
            while (left >= 8)
            {
                x.Add((byte) ReadBit(8));
                left -= 8;
            }
            if (left > 0)
                x.Add((byte) ReadBit2((uint) left));
            return x.ToArray();
        }

        public override long Position
        {
            get { return CurrentBit; }
            set
            {
                xbaseStream.Position = ((((value + xbasepos) >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC);
                CurrentBit = (uint) value;
                if ((value) < Length)
                    xshiftseed = (xbaseStream.ReadUInt32(true) << (int)((value + xbasepos) & 0xFFFFFFFF & 0x1F));
                else xshiftseed = 0;
            }
        }

        public override bool CanRead
        {
            get { return xbaseStream.CanRead; }
        }

        public override bool CanSeek
        {
            get { return xbaseStream.CanSeek; }
        }

        public override bool CanWrite
        {
            get { return xbaseStream.CanWrite; }
        }

        public override void Flush()
        {
            xbaseStream.Flush();
        }

        public override long Length
        {
            get { return (xbitlength == 0? OrigBitLength : xbitlength); }
        }

        public long OrigBitLength
        {
            get { return (((xbaseStream.Length) << 3) & 0x7FFFFFF); }
        }

        public long OrigLength
        {
            get { return xbaseStream.Length; }
        }

        public override int Read(byte[] buffer, int offset, int count)
        {
            if ((offset + count) > buffer.Length)
                return -1;
            if ((count + (Position >>3)) > Length)
                count = (int)((((Length - Position) >> 3) & 0x1FFFFFFF) & 0x1FFFFFFC);
            for (int i = offset; i < (offset + count); i++)
                buffer[i] = (byte) ReadByte();
            return count;
        }

        public override long Seek(long offset, SeekOrigin origin)
        {
            return xbaseStream.Seek(offset, origin);
        }

        public override void SetLength(long value)
        {
            xbaseStream.SetLength(value);
        }

        public override void Write(byte[] buffer, int offset, int count)
        {
            uint r11 = (uint) ((count << 3) & 0xFFFFFFF8);
            uint r5 = CurrentBit & 0xFFFFFFFF & 0x1F;
            uint r27 = (uint) (count & 0xFFFFFFFF & 3);
            long r9 = 1;
            uint written = 0;
            //if (r5 != r27)
            //{
                int r7 = (int) (0x20 - r5);
                int r8 = r7 - 1;
                int r10 = (int) (count & 0xFFFFFFFF & 0xFFFFFFFC);
                r9 <<= r8;
                r9 = (int) ((r9 << 1) & 0xFFFFFFFE);
                r8 = (int) (r9 - 1);
                long r3 = ~r8;
                for (int i = 0; i < (r10/4); i++)
                {
                    var temp = new byte[4];
                    Array.Copy(buffer, i * 4, temp, 0, 4);
                    if (IsBigEndian)
                        Array.Reverse(temp);
                    uint val = BitConverter.ToUInt32(temp, 0);
                    uint r30 = (val >> (int) r5);
                    r30 &= (uint)r8;
                    r30 = r30 | xshiftseed;
                    xbaseStream.WriteUInt32(r30, IsBigEndian);
                    val <<= r7;
                    xshiftseed = (uint) (val & r3);
                    written += 0x20;
                }
                if (r27 > 0)
                {
                    uint r6 = ((r27 << 3) & 0xFFFFFFF8);
                    if (r27 == 1)
                        r5 = buffer[r10];
                    else if (r27 == 2)
                        r5 = buffer.ToUShort(r10, IsBigEndian);
                    else
                    {
                        if(buffer.Length < (r10 +(r27 + 1)))
                        Array.Resize(ref buffer, (int)(r10 +(r27 + 1)));
                        r9 = 0x20 - r6;
                        r10 = buffer.ToInt32(r10, IsBigEndian);
                        r5 = (uint)(r10 >> (int)r9);
                    }
                    WriteBits(r5, r6);                   
                }
                CurrentBit += written;
          //  }
        }

        public void WriteInt16(short value)
        {
            WriteBits((uint) value, 0x10);
        }

        public void WriteUInt16(ushort value)
        {
            WriteBits(value, 0x10);
        }
        public void WriteInt24(int value)
        {
            WriteBits((uint)value, 0x18);
        }

        public void WriteInt32(int value)
        {
            WriteBits((uint)value, 0x20);
        }

        public void WriteUInt32(uint value)
        {
            WriteBits(value, 0x20);
        }

        public void WriteInt64(long value)
        {
            var t = BitConverter.GetBytes(value);
            if (IsBigEndian)
                Array.Reverse(t);
            Write(t, 0, 8);
        }

        public void WriteUInt64(ulong value)
        {
            var t = BitConverter.GetBytes(value);
            if (IsBigEndian)
                Array.Reverse(t);
            Write(t, 0, 8);
        }

        public void WriteBoolean(bool value)
        {
            WriteBits((uint) (value ? 1 : 0), 1);
        }

        public void WriteSingle(float value)
        {
            var t = BitConverter.GetBytes(value);
            if (IsBigEndian)
                Array.Reverse(t);
            Write(t, 0, 4);
        }

        public void WriteBits(uint value,uint bitlength)
        {
            int r11 = (int)(Position & 0xFFFFFFFF & 0x1F);
            uint r8 = 1;
            uint r10 = (uint) (0x20 - r11);
            r11 = (int) (bitlength - r10);
            if (r11 >= 0)
            {
                r10--;
                uint r6 = value >> r11;
                r10 = r8 << (int)r10;
                r10 = ((r10 << 1) & 0xFFFFFFFE);
                r10--;
                r6 &= r10;
                r10 = ~r10 & xshiftseed;
                uint r9 = r6 | r10;
                xbaseStream.WriteUInt32(r9, IsBigEndian);
                r10 = (uint) (0x20 - r11);
                r11 = (int) (r8 << r11);
                r11--;
                r8 = value << (int)r10;
                r11 <<= (int)r10;
                xshiftseed = 0;
            }
            else
            {
                r10 = bitlength - 1;
                r11 = -r11;
                r10 <<= (int)r8;
                r10 = ((r10 << 1) & 0xFFFFFFFE);
                r8 = value << r11;
                r10--;
                r11 = (int) (r10 << r11);
            }
            r10 = (uint) (r8 & r11);
            r11 = (int) (~r11 & xshiftseed);
            xshiftseed = (uint) (r10 | r11);
            CurrentBit += bitlength;
        }

        public void WriteData(byte[] data, int totalbits)
        {
            int index = 0;
            while (totalbits >= 0x20)
            {
                var d = new byte[0x4];
                Array.Copy(data, index, d, 0, 4);
                if (IsBigEndian)
                    Array.Reverse(d);
                WriteBits(BitConverter.ToUInt32(d, 0), 0x20);
                index += 4;
                totalbits -= 0x20;
            }
            while (totalbits >= 8 && index < data.Length)
            {
                WriteBits(data[index], 8);
                totalbits -= 8;
                index++;
            }
            if(totalbits > 0 && index < data.Length)
                WriteBits(data[index], (uint) totalbits);
        }

        public void WriteString(string value)
        {
            var x = Encoding.ASCII.GetBytes(value);
            Write(x, 0, x.Length);
        }

        public byte[] ToArray()
        {
            var ps = Position;
            Position = 0;
            var data = ReadBytes((int)Length, false);
            Position = ps;
            return data;
        }

        public override void Close()
        {
            if (!xpaststream)
            {
                xbaseStream.Close();
                xbaseStream.Dispose();
            }
            GC.SuppressFinalize(this);
        }
    }
}
